1、map()方法：
    map方法不会对空数组进行检测。
    map方法不会改变原始数组。
    返回值：返回一个新数组，数组中的元素为原始数组处理后的值。
    IE9以下不兼容。
    [1,2,3].map(function(item,index,array){
        return item * 2;     //2,4,6
    });

2、filter()方法：
    filter方法不会对空数组进行检测。
    filter方法不会改变原始数组。
    返回值：返回符合条件的所有元素组成的新数组。如果没有符合条件，则返回空数组。
    IE9以下不兼容。
    [1,2,3,4,5,6].filter(function(item,index,array){
        return item > 3;    //4 5 6
    });
3、forEach()方法：
    调用数组中的每个元素，并将元素传递给回调函数。
    返回值：无
    IE9以下不兼容。
    [1,2,3].forEach(function(item,index,array){
        console.log(item);  //1 2 3
    });

4、some()方法：
    检测数组中的元素是否满足指定条件,如果检测有一个元素满足条件，则表达式返回true,且剩余的元素不再去检测。如果没有满足条件，则返回false
    some方法不会对空数组进行检测。
    some方法不会改变原始数组。
    返回值： 布尔值。
    IE9以下不兼容。
    [1,2,3].some(function(item,index,array){
        return item > 2;   //true
    });
    [1,2,3].some(function(item,index,array){
        return item > 3;   //false
    });

5、every()方法：
    检测数组所有元素是否都符合指定条件,如果检测有一个元素不满足条件，则表达式返回false，且剩余的元素不再去检测。
    every方法不会对空数组进行检测。
    every方法不会改变原始数组。
    返回值： 布尔值。
    IE9以下不兼容。
    [3,6,9].some(function(item,index,array){
        return item > 3;   //false
    });
    [3,6,9].some(function(item,index,array){
        return item >= 3;   //true
    });

6、reduce()方法：



