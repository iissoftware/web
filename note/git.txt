
----------------------------------------- git 使用教程 ------------------------------
git diff：可以查看在工作区修改过后的文件不同之处。
git status：可以查看当前文件操作的状态。
git log：可以查看当前文件提交过后的记录。记录着提交者是谁，提交日期时间，提交的版本号。
git log --pretty=oneline：只显示提交过后的版本号。
git log --oneline：只显示提交过后的版本号，只不过这次只有前面7位字符的版本号。
pwd：显示当前目录所在的路径。
git init：将目录变成git可以管理的仓库。

--------------------------------- git 添加 -------------------------------------------
git add filename：讲文件filename从工作区添加到暂存区。
git add .：将所有文件从工作区添加到暂存区。


--------------------------------- git 提交 -------------------------------------------
git commit -m '提交注释'：将暂存区文件提交到本地仓库。
git commit -am '提交注释'：可以跳过添加到暂存区那一步，直接将工作区文件提交到本地仓库。


--------------------------------- git 回退/撤销 --------------------------------------
git reset HEAD^: 表示回退到上一个版本
git reset HEAD^^: 表示回退到上上一个版本
我们也可以使用git reset HEAD~n回退到n个版本
git commit --amend：取消上一次提交，并将暂存区文件重新提交到版本库。

git reset HEAD~1：	这个是软回退，先回退到暂存区，然后再使用命令
					git checkout -- filename 从暂存区回退到工作区。
git reset --hard HEAD~1：	也是回退，不过这个是强制回退，直接从版本库回退到工作区，
							不经过暂存区。

git reset --hard '某个版本号'：强制回退到具体某个版本号。

git reflog：用来记录整个本地仓库的commit。甚至包括已经撤销的commit。通过这条命令，可以找到已经撤销的commit id，从而恢复到您想要的最新版本。(人生没有后悔药，但git却给我们准备了后悔药)

git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。


--------------------------------- git 提交到远程仓库 -----------------------------------------
1、git clone url：将远程仓库克隆到本地。
2、git remote add origin '远程仓库地址'：将本地仓库与远程仓库关联起来。
3、git push -u origin master：将本地文件推向远程仓库。
(注意：如果你在第3步中出错，可能就是因为你的ssh秘钥引起的，此时，先在你的本地找到.ssh文件夹下的id_rsa.pub文件，将此问价下的秘钥复制，并打开您的github官网点击头像->settings -> ssh and gpg keys -> New ssh key -> 将秘钥复制进去，标题随便你起。此时之后你就可以push和pull了)


--------------------------------- git 删除 -------------------------------------------
#...待写

--------------------------------- git 重命名 -----------------------------------------
#...待写


//git 创建、删除、切换本地分支

git branch dev  ==> 新建一个dev分支，但不切换到其它分支
git checkout -b dev    ==>  建立一个新的本地分支dev并切换到dev分支
git checkout dev       ==>  切换到本地dev分支
git branch -d dev      ==>  删除本地dev分支

git branch   ==> 查看本地所有分支
git branch -r   ==> 查看远程所有分支(r是remote的简写，表示远程的)
git branch -a  ==>查看所有的分支(本地分支 + 远程分支)
git branch --all  ==> 查看所有分支。
git push origin master  ==> 将文件推到远程仓库master分支上
git push -u origin master -f  ==> 将文件强制推到远程仓库中。一般是不可取的，因为这样会使远程修改丢失，尤其是多人开发的时候。
git remote show  ==> 查看远程库 默认是origin
git clone git@github.com:iissoftware/web.git   ==> 从服务器上将代码给拉下来
git config --list  ==> 查看所有用户
git ls-files  ==> 查看已经添加到暂存区的文件
git ls-files -s  ==> 查看已经添加到暂存区的文件
git diff --cached ==> 查看暂存区文件
git diff --staged ==> 查看暂存区文件
git rm --cached <file>  ==> 仅仅删除暂存区文件，不会影响到工作区
git rm -f <file>  ==> 删除暂存区和工作区的文件
rm <file> ==> 删除工作区的文件

git push origin -d dev   ==>  删除远程dev分支
git merge dev  ==>  在本地master分支下，将本地分支dev合并到master分支上。




git status的一些状态命令：

git status  ===> 输出详细的内容，但看起来有点繁琐.
git status -s(--short)  ===>  输出简短型状态信息。有几种状态标记。
   ?? ==> 表示新添加的未跟踪文件。
   A  ==> 表示新添加到暂存区中的文件。A是add的缩写。
   M  ==> 表示修改过的文件但还是添加到暂存区。M是modify的缩写。
   D  ==> 表示已经删除的文件。它自身又有两种颜色的D标识。如果D是红色的，表示仅仅删除工作区中的文件。如果D是绿色的，表示仅仅删除暂存区中的文件。



配置你需要的编辑器：
 git config --global core.editor     ==> 将core.editor编辑器设置为git 默认打开的编辑器。


git更新远程仓库代码到本地流程：
1、git remote -v  === 查看远程仓库(我这里有一个origin仓库)

2、从远程获取最新版本到本地
   git fetch origin master:temp   （temp为本地分支）

3、比较本地仓库与下载的temp分支
   git diff temp

4、合并temp分支到本地的master分支
   git merge temp

5、删除temp分支
   git branch -d temp


cnpm与webpack 命令找不到解决办法：
   1、where node       ===>  先查看node安装的路径
   2、npm config ls    ===>  查看npm配置信息，此时看到一个prefix属性，它表明npm包安装的默认路径。
   3、npm config set prefix "你的包安装路径"
将cnpm文件和cnpm.cmd放入与npm文件npm.cmd同一个目录路径下即可，然后将cnpm目录包放入与npm.cmd同一目录下的node_modules目录下即可。
将webpack文件和webpack.cmd放入与npm文件npm.cmd同一个目录路径下即可，然后将webpack目录包放入与npm.cmd同一目录下的node_modules目录下即可。