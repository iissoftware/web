
一、js-面向对象-封装
	//使用prototype模式
	function Animal(){
		this.species = '动物';
	}
	function Cat(name,color){
		this.name = name;
		this.color = color;
	}

	//添加公共属性
	Cat.prototype.type = '猫科动物';
	//添加公共方法
	Cat.prototype.eat = function(){ return '吃老鼠'; }

	var cat1 = new Cat('大毛','灰色');
	var cat2 = new Cat('二毛','白色');
	console.log(cat1.eat());	//吃老鼠
	console.log(cat1.type);	//猫科动物

	1) isPrototypeOf(): //判断一个prototype对象是否是某个实例的对象
		console.log(Cat.prototype.isPrototypeOf(cat1));		//true
		console.log(Animal.prototype.isPrototypeOf(cat1));		//false
	2) hasOwnProperty(): //判断该实例对象中的属性是否是该对象中的本地属性，还是继承来自prototype中的对象属性
		console.log(cat1.hasOwnProperty('name'));	//true
		console.log(cat1.hasOwnProperty('type'));	//false  因为是继承来的属性，而不是本地属性
	3) constructor: //每一个实例对象都有一个constructor属性，用来指向它的当前的构造函数。
		console.log(Cat.prototype.constructor === Cat);		//true
		Cat.prototype = new Animal();
		console.log(Cat.prototype.constructor === Cat);		//false
		console.log(Cat.prototype.constructor === Animal);		//true

二、js-面向对象-继承
	js继承有几种方式，分别为：(apply,call)、prototype、拷贝继承。
		function Animal(){
			this.species = '动物';
		}
		function Cat(name,color){
		 	this.name = name;
		 	this.color = color;
		 	Animal.apply(this,arguments);
		}

		var cat = new Cat('大毛','灰色');
		console.log(cat.species);	//动物

		Cat.prototype = new Animal();
		var cat = new Cat('大毛','灰色');
		console.log(cat.species);	//动物




